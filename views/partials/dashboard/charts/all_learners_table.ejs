<div class="col-md-6 col-xxl-4 d-flex order-2 order-xxl-4"></div>
<div class="card flex-fill w-100">
  <div class="px-4 pt-3">
    <h5 class="card-title mb-0">All learners</h5>
  </div>
  <div class="px-4 pb-4 d-flex">
    <div class="align-self-center w-100">
      <div class="py-3">
        <div class="chart chart-xs">
          <div id="learner-table"></div>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Confirm Delete</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this learner?</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button id="deleteButton" type="button" class="btn btn-primary">Delete</button>
      </div>
    </div>
  </div>
</div>
<style>
  .error-message {
    color: #ff0000;
  }
</style>
<script src="https://cdn.jsdelivr.net/npm/gridjs@latest/dist/gridjs.production.min.js"></script>
<%- include('./learnereditmodal'); %>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.min.js" integrity="sha384-Y4oOpwW3duJdCWv5ly8SCFYWqFDsfob/3GkgExXKV4idmbt98QcxXYs9UoXAB7BZ" crossorigin="anonymous"></script>

<script>
  const coursesTableElement = document.getElementById('learner-table')

  const COLUMN_NAMES = ['First Name', 'Last Name', 'Email', "Status", "CreatedAt", "UpdatedAt"];

  const SERVER_URL = 'data';

  const getServerUrlWithPagination = (prev, page, limit) => {
    const queryParams = `limit=${limit}&offset=${page * limit}`;
    return prev === SERVER_URL ?
      `${prev}?${queryParams}` :
      `${prev}&${queryParams}`;
  };

  const getServerUrlWithSearch = (prev, keyword) => `${prev}?search=${keyword}`;

  const getServerUrlWithSort = (prev, columns) => {
    if (!columns.length) {
      return prev;
    }
    const sign = prev === SERVER_URL ? '?' : '&';
    const col = columns[0];
    const dir = col.direction === 1 ? 'asc' : 'desc';
    const colName = COLUMN_NAMES[col.index];
    return `${prev}${sign}order=${colName}&dir=${dir}`;
  };

  function DeleteModal(Id) {
    const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
    const deleteButton = document.getElementById('deleteButton');
    deleteButton.addEventListener('click', function() {
      const learnerId = Id;
      const encodedLearnerId = encodeURIComponent(learnerId);
      const url = `/learners/delete/${encodedLearnerId}`;

      fetch(url, {
          method: 'GET',
        })
        .then(res => {
          if (res.ok) {
            modal.hide();
            window.location.href = '/dashboard/learners';
          } else {
            console.error('Failed to delete learner');
          }
        })
        .catch(error => {
          console.error('Failed to delete learner:', error);
        });
    });

    modal.show();
  }
  (async () => {
    const datatable_learners_grid = new gridjs.Grid({
      columns: [
        ...COLUMN_NAMES,
        {
          name: 'Action',
          formatter: (_, row) => gridjs.html(
            `
        <button style="padding: 0.5rem 1rem; margin-bottom: 0.3rem; border: none; border-radius: 0.25rem; background-color: #1E40AF; color: white; font-size: 1rem; font-weight: 500;" 
          id="edit-button" type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#editModal"
          onclick="setModalData('${row.cells[0].data}', '${row.cells[1].data}' ,'${row.cells[2].data}')">
          Edit
        </button>
        <button onclick="DeleteModal('${row.cells[2].data}')" style="padding: 0.5rem 1rem; margin-bottom: 1rem; border: none; border-radius: 0.25rem; color: #fff; background-color: #f44336;color: white; font-size: 1rem; font-weight: 500">
            Delete
        </button>
        <button style="padding: 0.2rem .5rem; margin-bottom: 0.5rem; border: none; border-radius: 0.25rem; background-color: #1E40AF; color: white; font-size: .8rem; font-weight: 500;">
            Reset Password
        </button>`
          )
        }
      ],
      fixedHeader: true,
      pagination: {
        limit: 3,
        server: {
          url: getServerUrlWithPagination
        }
      },
      search: {
        server: {
          url: getServerUrlWithSearch
        }
      },

      server: {
        url: SERVER_URL,
        method: 'POST',
        then: data => data.learners.map(learner => [learner.firstname, learner.lastname, learner.email, "Active", learner.createdAt, learner.updatedAt]),
        total: data => data.count
      }


      //,sort: true, its make a problem for searching
    }).render(coursesTableElement);
  })();


  function setModalData(firstName, lastName, email, id) {
    const saveUpdateButton = document.getElementById('save-update');
    const firstNameLabel = document.getElementById('first-name-label1');
    const lastNameLabel = document.getElementById('last-name-label1');
    const emailLabel = document.getElementById('email-label1');
    saveUpdateButton.dataset.id = id;
    const firstNameInput = document.getElementById('first-name');
    const lastNameInput = document.getElementById('last-name');
    const emailInput = document.getElementById('email');
    firstNameLabel.textContent = firstName;
    lastNameLabel.textContent = lastName;
    emailLabel.textContent = email;
    firstNameInput.value = firstName;
    lastNameInput.value = lastName;
    emailInput.value = email;
    clearErrorMessage(emailInput);
    clearErrorMessage(firstNameInput);
    clearErrorMessage(lastNameInput);
    clearInputs()
  }

  function validateEmail(email) {
    // Regular expression pattern for email validation
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailPattern.test(email);
  }

  function displayErrorMessage(inputElement, errorMessage) {
    const errorElementId = inputElement.id + '-error';
    const errorElement = document.getElementById(errorElementId);
    errorElement.textContent = errorMessage;
    errorElement.style.display = 'block';
  }

  function clearErrorMessage(inputElement) {
    const errorElementId = inputElement.id + '-error';
    const errorElement = document.getElementById(errorElementId);
    errorElement.textContent = '';
    errorElement.style.display = 'none';
  }

  function updateProfile() {
    const emailInput = document.getElementById('email');
    const emailValue = emailInput.value.trim();
    if (!validateEmail(emailValue)) {
      displayErrorMessage(emailInput, 'Invalid email format. Please enter a valid email address.');
      return;
    }
    var email = document.getElementById("mail");
    const saveUpdateButton = document.getElementById('save-update');
    saveUpdateButton.dataset.email = emailValue;
    emailInput.value = emailValue;
    const email1 = document.getElementById('save-update').dataset.email;
    const userEmail = saveUpdateButton.dataset.email;
    var emailInput1 = document.getElementById('email').value;
    const firstNameLabel = document.getElementById('first-name-label').textContent.trim();
    const lastNameLabel = document.getElementById('last-name-label').textContent.trim();
    const emailLabel = document.getElementById('email-label').textContent.trim();
    const firstNameInput = document.getElementById('first-name');
    const firstNameValue = firstNameInput.value.trim();
    const lastNameInput = document.getElementById('last-name');
    const lastNameValue = lastNameInput.value.trim();
    var learnerData = {
      userEmail: emailLabel,
    };
    if (firstNameValue !== '' && firstNameValue !== learnerData.firstNameInput) {
      learnerData.firstNameInput = firstNameValue;
    }
    if (lastNameValue !== '' && lastNameValue !== learnerData.lastNameInput) {
      learnerData.lastNameInput = lastNameValue;
    }
    if (emailValue !== '' && emailValue !== learnerData.emailInput) {
      learnerData.emailInput = emailValue;
    }
    if (!validateEmail(emailValue)) {
      displayErrorMessage(emailInput, 'Invalid email format. Please enter a valid email address.');
      return;
    }
    if (firstNameValue === '') {
      displayErrorMessage(firstNameInput, 'First name is required.');
      return;
    }
    if (lastNameValue === '') {
      displayErrorMessage(lastNameInput, 'Last name is required.');
      return;
    }

    clearErrorMessage(emailInput);
    clearErrorMessage(firstNameInput);
    clearErrorMessage(lastNameInput);
    fetch('/dashboard/learners', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(learnerData)
      })
      .then(data => {
        if (data.status === 200) {
          window.location.reload();
        } else if (data.status === 400) {
          displayErrorMessage(emailInput, 'Email is already used, Enter a Different Email');
        }
      })
      .catch(error => {
        console.error('Error:', error);
      });
  }

  function clearInputs() {
    const firstName = document.getElementById('first-name');
    const lastName = document.getElementById('last-name');
    const email = document.getElementById('email');
    const firstNameLabel = firstName.previousElementSibling;
    const lastNameLabel = lastName.previousElementSibling;
    const emailLabel = email.previousElementSibling;
    const firstNamePencil = document.getElementById('pencil-first-name');
    const lastNamePencil = document.getElementById('pencil-last-name');
    const emailPencil = document.getElementById('pencil-email');
    firstName.classList.add('d-none');
    lastName.classList.add('d-none');
    email.classList.add('d-none');
    firstNameLabel.classList.remove('d-none');
    lastNameLabel.classList.remove('d-none');
    emailLabel.classList.remove('d-none');
    firstNamePencil.classList.remove('d-none');
    lastNamePencil.classList.remove('d-none');
    emailPencil.classList.remove('d-none');
  }

  function editField(id) {
    const fieldSpan = document.getElementById(id).previousElementSibling;
    fieldSpan.classList.add('d-none');
    const input = document.getElementById(id);
    input.classList.remove('d-none');
    input.focus();
    input.select();
    const pencil = document.getElementById(`pencil-${id}`);
    pencil.classList.add('d-none');
  }
</script>